#!/usr/bin/env ruby

$LOAD_PATH << File.expand_path( File.dirname( __FILE__ ) + '/../lib' )

require 'expando'
require 'gli'
require 'front_matter_parser'
require 'tty-table'

include GLI::App

version Expando::VERSION

program_desc 'A tool for managing files written in the Expando language.'

# Prefer using config file frow current working directory. Otherwise, use config
# file in home directory.
config_filename = '.expando.rc.yaml'
current_directory_config_filename = File.join(Dir.pwd, config_filename)
home_directory_config_filename = File.join(ENV['HOME'], config_filename)

if File.exist?(current_directory_config_filename)
  config_file current_directory_config_filename
else
  config_file home_directory_config_filename
end

flag :client_access_token,    desc: 'API.ai Client Access Token'
flag :developer_access_token, desc: 'API.ai Developer Access Token'
flag :intents_path,           desc: 'The path to the directory containing intent files'
flag :entities_path,          desc: 'The path to the directory containing entity files'
flag :responses_path,         desc: 'The path to the directory containing intent responses files'

# Make credentials globally accessible
pre do |global_options|

  global_options[:credentials] = {
    client_access_token:    global_options[:client_access_token] ||
                              ENV['API_AI_CLIENT_ACCESS_TOKEN'],
    developer_access_token: global_options[:developer_access_token] ||
                              ENV['API_AI_DEVELOPER_ACCESS_TOKEN']
  }

  # The default location of intent source files
  global_options[:intents_path] = File.join(Dir.pwd, 'intents')

  # The default location of entity source files
  global_options[:entities_path] = File.join(Dir.pwd, 'entities')

  # The default location of intent response source files
  global_options[:responses_path] = File.join(Dir.pwd, 'responses')
end

desc 'Update an API.ai agent\'s entities and/or intents'
long_desc <<-DESC
  Update Expando's entities and intents on API.ai based on the contents of the
  files in the entities and intents directories, respectively.
DESC
command [ :update, :u ] do | c |

  c.desc "Update an API.ai agent's entities"
  c.long_desc <<-DESC
    Updates the specified entities. The entity names can be specified after this
    argument in a space delimited list, and should match the file name of the
    specific entity in the entities directory. If no entity name is specified,
    all entities are updated.
  DESC
  c.arg 'entity[ entity]*'
  c.example 'expando update entities', desc: 'Update all intents on API.ai'
  c.example 'expando update entities location artist',
            desc: 'Update the location and artist entities on API.ai'
  c.command :entities do | entities |
    entities.flag :entities_path, desc: 'The path to the directory containing entity files'

    entities.action do | global_options, options, args |
      # Determine path to entity files
      if entities_path_from_options = options[:entities_path] || global_options[:entities_path]
        entities_path_from_options = File.expand_path(entities_path_from_options)
      end

      Expando::ApiAi::Updaters::EntityUpdater.new(
        args,
        intents_path:           entities_path_from_options,
        developer_access_token: global_options[:credentials][:developer_access_token],
        client_access_token:    global_options[:credentials][:client_access_token]
      ).update!
    end
  end

  c.desc "Update an API.ai agent's intents"
  c.long_desc <<-DESC
    Updates the specified intents. The intent names can be specified after this
    argument in a space delimited list, and should match the file name of the
    specific intent in the intents directory. If no intent name is specified,
    all intents are updated.
  DESC
  c.arg 'intent[ intent]*'
  c.example 'expando update intents', desc: 'Update all intents on API.ai'
  c.example 'expando update intents canIReturn openHours',
            desc: 'Update the canIReturn and openHours intents on API.ai'
  c.command :intents do |intents|
    intents.flag :intents_path, desc: 'The path to the directory containing intent files'

    intents.action do |global_options, options, args|
      # Determine path to intent files
      if intents_path_from_options = options[:intents_path] || global_options[:intents_path]
        intents_path_from_options = File.expand_path(intents_path_from_options)
      end

      Expando::ApiAi::Updaters::IntentUpdater.new(
        args,
        intents_path:           intents_path_from_options,
        developer_access_token: global_options[:credentials][:developer_access_token],
        client_access_token:    global_options[:credentials][:client_access_token]
      ).update!
    end
  end

  # TODO: Default to both in sequence
  #c.default_command :entities
end

desc 'List entities and/or intents'
long_desc <<-DESC
  List entities and intents, and their metadata, based on the front-matter in the
  files in the entities and intents directories, respectively.
DESC
command [ :list, :l ] do | c |

  c.desc 'List intents and their associated metadata'
  c.long_desc <<-DESC
    List intents and their associated YAML front-matter metadata.
  DESC
  c.example 'expando list intents', desc: 'List the metadata for all intents'
  c.command :intents do |intents|
    intents.flag :intents_path, desc: 'The path to the directory containing intent files'

    intents.action do |global_options, options|
      pastel = Pastel.new

      # Determine path to intent files
      intents_path_from_options = options[:intents_path] || global_options[:intents_path]

      intent_file_names = Dir.entries(intents_path_from_options)[2..-1]

      table_headers = Set.new
      table_data = []
      intent_metadata = []

      # For each intent file...
      intent_file_names.each do |intent_file_name|
        intent_file_path = File.join(intents_path_from_options, intent_file_name)

        # ...parse its YAML front-matter.
        intent_metadata << FrontMatterParser.parse_file(
          intent_file_path,
          comment: '#'
        )
      end

      # Intent name should always be present.
      table_headers << pastel.magenta.bold.italic('INTENT')

      # Build a list of each table header.
      intent_metadata.each do |data|
        data.front_matter.each do |key, value|
          table_headers << key
        end
      end
      table_headers = table_headers.to_a

      # Build a table of intent data, matched to its proper column.
      intent_metadata.each_with_index do |data, index|
        row = []

        # Add the intent name to the row data.
        row << pastel.magenta.bold.italic(intent_file_names[index].gsub('.txt', ''))

        # Add the intent data to the proper columns.
        table_headers[1..-1].each do |column|
          value = data.front_matter[column]
          row << (value) #&& value[0..10].gsub(/\s\w+\s*$/, '...'))
        end

        table_data << row unless row[1..-1].all?(&:nil?)
      end

      # Render the table.
      table = TTY::Table.new table_headers, table_data
      renderer = TTY::Table::Renderer::Unicode.new(
        table,{
          border: {
            style: :magenta
          },
          multiline: true
        }
      )

      puts renderer.render
    end
  end
end

desc 'Initialize a new Expando project'
long_desc <<-DESC
  Create the necessary files and directories for a new Expando project in the
  current working directory.
DESC
command [ :init, :i ] do | c |
  c.example 'expando init .', desc: 'Initialize an Expando project in the current directory.'

  c.action do
    Expando::ProjectTemplate.init!
  end
end

exit run(ARGV)
